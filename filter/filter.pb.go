// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.7.0
// source: github.com/aperturerobotics/util/filter/filter.proto

package filter

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
)

// StringFilter matches the value of a string against a set of rules.
// All of the non-zero rules must match for the filter to match.
// An empty filter matches any.
type StringFilter struct {
	unknownFields []byte
	// Empty matches the value against the empty value.
	Empty bool `protobuf:"varint,1,opt,name=empty,proto3" json:"empty,omitempty"`
	// NotEmpty matches the value against a not-empty value.
	NotEmpty bool `protobuf:"varint,2,opt,name=not_empty,json=notEmpty,proto3" json:"notEmpty,omitempty"`
	// Value matches an exact value.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Values matches one or more exact values.
	// If any of the values match, this field is considered matched.
	Values []string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	// Re matches the value against a regular expression.
	Re string `protobuf:"bytes,5,opt,name=re,proto3" json:"re,omitempty"`
	// HasPrefix checks if the value has the given prefix.
	HasPrefix string `protobuf:"bytes,6,opt,name=has_prefix,json=hasPrefix,proto3" json:"hasPrefix,omitempty"`
	// HasSuffix checks if the value has the given suffix.
	HasSuffix string `protobuf:"bytes,7,opt,name=has_suffix,json=hasSuffix,proto3" json:"hasSuffix,omitempty"`
	// Contains checks if the value contains the given value.
	Contains string `protobuf:"bytes,8,opt,name=contains,proto3" json:"contains,omitempty"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

func (x *StringFilter) GetNotEmpty() bool {
	if x != nil {
		return x.NotEmpty
	}
	return false
}

func (x *StringFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringFilter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StringFilter) GetRe() string {
	if x != nil {
		return x.Re
	}
	return ""
}

func (x *StringFilter) GetHasPrefix() string {
	if x != nil {
		return x.HasPrefix
	}
	return ""
}

func (x *StringFilter) GetHasSuffix() string {
	if x != nil {
		return x.HasSuffix
	}
	return ""
}

func (x *StringFilter) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

func (m *StringFilter) CloneVT() *StringFilter {
	if m == nil {
		return (*StringFilter)(nil)
	}
	r := new(StringFilter)
	r.Empty = m.Empty
	r.NotEmpty = m.NotEmpty
	r.Value = m.Value
	r.Re = m.Re
	r.HasPrefix = m.HasPrefix
	r.HasSuffix = m.HasSuffix
	r.Contains = m.Contains
	if rhs := m.Values; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Values = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StringFilter) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *StringFilter) EqualVT(that *StringFilter) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Empty != that.Empty {
		return false
	}
	if this.NotEmpty != that.NotEmpty {
		return false
	}
	if this.Value != that.Value {
		return false
	}
	if len(this.Values) != len(that.Values) {
		return false
	}
	for i, vx := range this.Values {
		vy := that.Values[i]
		if vx != vy {
			return false
		}
	}
	if this.Re != that.Re {
		return false
	}
	if this.HasPrefix != that.HasPrefix {
		return false
	}
	if this.HasSuffix != that.HasSuffix {
		return false
	}
	if this.Contains != that.Contains {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StringFilter) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StringFilter)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the StringFilter message to JSON.
func (x *StringFilter) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Empty || s.HasField("empty") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("empty")
		s.WriteBool(x.Empty)
	}
	if x.NotEmpty || s.HasField("notEmpty") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("notEmpty")
		s.WriteBool(x.NotEmpty)
	}
	if x.Value != "" || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		s.WriteString(x.Value)
	}
	if len(x.Values) > 0 || s.HasField("values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("values")
		s.WriteStringArray(x.Values)
	}
	if x.Re != "" || s.HasField("re") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("re")
		s.WriteString(x.Re)
	}
	if x.HasPrefix != "" || s.HasField("hasPrefix") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("hasPrefix")
		s.WriteString(x.HasPrefix)
	}
	if x.HasSuffix != "" || s.HasField("hasSuffix") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("hasSuffix")
		s.WriteString(x.HasSuffix)
	}
	if x.Contains != "" || s.HasField("contains") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("contains")
		s.WriteString(x.Contains)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StringFilter to JSON.
func (x *StringFilter) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StringFilter message from JSON.
func (x *StringFilter) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "empty":
			s.AddField("empty")
			x.Empty = s.ReadBool()
		case "not_empty", "notEmpty":
			s.AddField("not_empty")
			x.NotEmpty = s.ReadBool()
		case "value":
			s.AddField("value")
			x.Value = s.ReadString()
		case "values":
			s.AddField("values")
			if s.ReadNil() {
				x.Values = nil
				return
			}
			x.Values = s.ReadStringArray()
		case "re":
			s.AddField("re")
			x.Re = s.ReadString()
		case "has_prefix", "hasPrefix":
			s.AddField("has_prefix")
			x.HasPrefix = s.ReadString()
		case "has_suffix", "hasSuffix":
			s.AddField("has_suffix")
			x.HasSuffix = s.ReadString()
		case "contains":
			s.AddField("contains")
			x.Contains = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the StringFilter from JSON.
func (x *StringFilter) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *StringFilter) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringFilter) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StringFilter) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Contains) > 0 {
		i -= len(m.Contains)
		copy(dAtA[i:], m.Contains)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Contains)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HasSuffix) > 0 {
		i -= len(m.HasSuffix)
		copy(dAtA[i:], m.HasSuffix)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.HasSuffix)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HasPrefix) > 0 {
		i -= len(m.HasPrefix)
		copy(dAtA[i:], m.HasPrefix)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.HasPrefix)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Re) > 0 {
		i -= len(m.Re)
		copy(dAtA[i:], m.Re)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Re)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NotEmpty {
		i--
		if m.NotEmpty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Empty {
		i--
		if m.Empty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StringFilter) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Empty {
		n += 2
	}
	if m.NotEmpty {
		n += 2
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	l = len(m.Re)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.HasPrefix)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.HasSuffix)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Contains)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (x *StringFilter) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StringFilter {")
	if x.Empty != false {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("empty: ")
		sb.WriteString(strconv.FormatBool(x.Empty))
	}
	if x.NotEmpty != false {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("not_empty: ")
		sb.WriteString(strconv.FormatBool(x.NotEmpty))
	}
	if x.Value != "" {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("value: ")
		sb.WriteString(strconv.Quote(x.Value))
	}
	if len(x.Values) > 0 {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("values: [")
		for i, v := range x.Values {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	if x.Re != "" {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("re: ")
		sb.WriteString(strconv.Quote(x.Re))
	}
	if x.HasPrefix != "" {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("has_prefix: ")
		sb.WriteString(strconv.Quote(x.HasPrefix))
	}
	if x.HasSuffix != "" {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("has_suffix: ")
		sb.WriteString(strconv.Quote(x.HasSuffix))
	}
	if x.Contains != "" {
		if sb.Len() > 14 {
			sb.WriteString(" ")
		}
		sb.WriteString("contains: ")
		sb.WriteString(strconv.Quote(x.Contains))
	}
	sb.WriteString("}")
	return sb.String()
}

func (x *StringFilter) String() string {
	return x.MarshalProtoText()
}
func (m *StringFilter) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotEmpty = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Re", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Re = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
