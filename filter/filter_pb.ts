// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/util/filter/filter.proto (package filter, syntax proto3)
/* eslint-disable */

import {
  createMessageType,
  Message,
  MessageType,
  PartialFieldInfo,
} from '@aptre/protobuf-es-lite'

export const protobufPackage = 'filter'

/**
 * StringFilter matches the value of a string against a set of rules.
 * All of the non-zero rules must match for the filter to match.
 * An empty filter matches any.
 *
 * @generated from message filter.StringFilter
 */
export interface StringFilter extends Message<StringFilter> {
  /**
   * Empty matches the value against the empty value.
   *
   * @generated from field: bool empty = 1;
   */
  empty?: boolean
  /**
   * NotEmpty matches the value against a not-empty value.
   *
   * @generated from field: bool not_empty = 2;
   */
  notEmpty?: boolean
  /**
   * Value matches an exact value.
   *
   * @generated from field: string value = 3;
   */
  value?: string
  /**
   * Values matches one or more exact values.
   * If any of the values match, this field is considered matched.
   *
   * @generated from field: repeated string values = 4;
   */
  values?: string[]
  /**
   * Re matches the value against a regular expression.
   *
   * @generated from field: string re = 5;
   */
  re?: string
  /**
   * HasPrefix checks if the value has the given prefix.
   *
   * @generated from field: string has_prefix = 6;
   */
  hasPrefix?: string
  /**
   * HasSuffix checks if the value has the given suffix.
   *
   * @generated from field: string has_suffix = 7;
   */
  hasSuffix?: string
  /**
   * Contains checks if the value contains the given value.
   *
   * @generated from field: string contains = 8;
   */
  contains?: string
}

export const StringFilter: MessageType<StringFilter> = createMessageType({
  typeName: 'filter.StringFilter',
  fields: [
    { no: 1, name: 'empty', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'not_empty', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'values',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 5, name: 're', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'has_prefix', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'has_suffix', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 8, name: 'contains', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
