// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/util/filter/filter.proto (package filter, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * StringFilter matches the value of a string against a set of rules.
 * All of the non-zero rules must match for the filter to match.
 * An empty filter matches any.
 *
 * @generated from message filter.StringFilter
 */
export class StringFilter extends Message<StringFilter> {
  /**
   * Empty matches the value against the empty value.
   *
   * @generated from field: bool empty = 1;
   */
  empty = false

  /**
   * NotEmpty matches the value against a not-empty value.
   *
   * @generated from field: bool not_empty = 2;
   */
  notEmpty = false

  /**
   * Value matches an exact value.
   *
   * @generated from field: string value = 3;
   */
  value = ''

  /**
   * Values matches one or more exact values.
   * If any of the values match, this field is considered matched.
   *
   * @generated from field: repeated string values = 4;
   */
  values: string[] = []

  /**
   * Re matches the value against a regular expression.
   *
   * @generated from field: string re = 5;
   */
  re = ''

  /**
   * HasPrefix checks if the value has the given prefix.
   *
   * @generated from field: string has_prefix = 6;
   */
  hasPrefix = ''

  /**
   * HasSuffix checks if the value has the given suffix.
   *
   * @generated from field: string has_suffix = 7;
   */
  hasSuffix = ''

  /**
   * Contains checks if the value contains the given value.
   *
   * @generated from field: string contains = 8;
   */
  contains = ''

  constructor(data?: PartialMessage<StringFilter>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'filter.StringFilter'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'empty', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'not_empty', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'values',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 5, name: 're', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'has_prefix', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'has_suffix', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 8, name: 'contains', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): StringFilter {
    return new StringFilter().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): StringFilter {
    return new StringFilter().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): StringFilter {
    return new StringFilter().fromJsonString(jsonString, options)
  }

  static equals(
    a: StringFilter | PlainMessage<StringFilter> | undefined,
    b: StringFilter | PlainMessage<StringFilter> | undefined,
  ): boolean {
    return proto3.util.equals(StringFilter, a, b)
  }
}
