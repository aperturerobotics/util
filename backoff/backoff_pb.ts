// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/util/backoff/backoff.proto (package backoff, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * BackoffKind is the kind of backoff.
 *
 * @generated from enum backoff.BackoffKind
 */
export enum BackoffKind {
  /**
   * BackoffKind_UNKNOWN defaults to BackoffKind_EXPONENTIAL
   *
   * @generated from enum value: BackoffKind_UNKNOWN = 0;
   */
  BackoffKind_UNKNOWN = 0,

  /**
   * BackoffKind_EXPONENTIAL is an exponential backoff.
   *
   * @generated from enum value: BackoffKind_EXPONENTIAL = 1;
   */
  BackoffKind_EXPONENTIAL = 1,

  /**
   * BackoffKind_CONSTANT is a constant backoff.
   *
   * @generated from enum value: BackoffKind_CONSTANT = 2;
   */
  BackoffKind_CONSTANT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BackoffKind)
proto3.util.setEnumType(BackoffKind, 'backoff.BackoffKind', [
  { no: 0, name: 'BackoffKind_UNKNOWN' },
  { no: 1, name: 'BackoffKind_EXPONENTIAL' },
  { no: 2, name: 'BackoffKind_CONSTANT' },
])

/**
 * Backoff configures a backoff.
 *
 * @generated from message backoff.Backoff
 */
export class Backoff extends Message<Backoff> {
  /**
   * BackoffKind is the kind of backoff.
   *
   * @generated from field: backoff.BackoffKind backoff_kind = 1;
   */
  backoffKind = BackoffKind.BackoffKind_UNKNOWN

  /**
   * Exponential is the arguments for an exponential backoff.
   *
   * @generated from field: backoff.Exponential exponential = 2;
   */
  exponential?: Exponential

  /**
   * Constant is the arugment for a constant backoff.
   *
   * @generated from field: backoff.Constant constant = 3;
   */
  constant?: Constant

  constructor(data?: PartialMessage<Backoff>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'backoff.Backoff'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'backoff_kind',
      kind: 'enum',
      T: proto3.getEnumType(BackoffKind),
    },
    { no: 2, name: 'exponential', kind: 'message', T: Exponential },
    { no: 3, name: 'constant', kind: 'message', T: Constant },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Backoff {
    return new Backoff().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Backoff {
    return new Backoff().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Backoff {
    return new Backoff().fromJsonString(jsonString, options)
  }

  static equals(
    a: Backoff | PlainMessage<Backoff> | undefined,
    b: Backoff | PlainMessage<Backoff> | undefined,
  ): boolean {
    return proto3.util.equals(Backoff, a, b)
  }
}

/**
 * Exponential is the exponential arguments.
 *
 * @generated from message backoff.Exponential
 */
export class Exponential extends Message<Exponential> {
  /**
   * InitialInterval is the initial interval in milliseconds.
   * Default: 800ms.
   *
   * @generated from field: uint32 initial_interval = 1;
   */
  initialInterval = 0

  /**
   * Multiplier is the timing multiplier.
   * Default: 1.8
   *
   * @generated from field: float multiplier = 2;
   */
  multiplier = 0

  /**
   * MaxInterval is the maximum timing interval in milliseconds.
   * Default: 20 seconds
   *
   * @generated from field: uint32 max_interval = 3;
   */
  maxInterval = 0

  /**
   * RandomizationFactor is the randomization factor.
   * Should be from [0, 1] as a percentage of the retry interval.
   *
   * randomized interval = RetryInterval * (random value in range [1 - RandomizationFactor, 1 + RandomizationFactor])
   *
   * Default: 0 (disabled)
   *
   * @generated from field: float randomization_factor = 4;
   */
  randomizationFactor = 0

  /**
   * MaxElapsedTime if set specifies a maximum time for the backoff, in milliseconds.
   * After this time the backoff and attached process terminates.
   * May be empty, might be ignored.
   *
   * @generated from field: uint32 max_elapsed_time = 5;
   */
  maxElapsedTime = 0

  constructor(data?: PartialMessage<Exponential>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'backoff.Exponential'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'initial_interval',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    { no: 2, name: 'multiplier', kind: 'scalar', T: 2 /* ScalarType.FLOAT */ },
    {
      no: 3,
      name: 'max_interval',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 4,
      name: 'randomization_factor',
      kind: 'scalar',
      T: 2 /* ScalarType.FLOAT */,
    },
    {
      no: 5,
      name: 'max_elapsed_time',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Exponential {
    return new Exponential().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Exponential {
    return new Exponential().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Exponential {
    return new Exponential().fromJsonString(jsonString, options)
  }

  static equals(
    a: Exponential | PlainMessage<Exponential> | undefined,
    b: Exponential | PlainMessage<Exponential> | undefined,
  ): boolean {
    return proto3.util.equals(Exponential, a, b)
  }
}

/**
 * Constant contains constant backoff options.
 *
 * @generated from message backoff.Constant
 */
export class Constant extends Message<Constant> {
  /**
   * Interval is the timing to back off, in milliseconds.
   * Defaults to 5 seconds.
   *
   * @generated from field: uint32 interval = 1;
   */
  interval = 0

  constructor(data?: PartialMessage<Constant>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'backoff.Constant'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'interval', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Constant {
    return new Constant().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Constant {
    return new Constant().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Constant {
    return new Constant().fromJsonString(jsonString, options)
  }

  static equals(
    a: Constant | PlainMessage<Constant> | undefined,
    b: Constant | PlainMessage<Constant> | undefined,
  ): boolean {
    return proto3.util.equals(Constant, a, b)
  }
}
