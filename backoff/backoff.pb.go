// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// source: github.com/aperturerobotics/util/backoff/backoff.proto

package backoff

import (
	strconv "strconv"
)

// BackoffKind is the kind of backoff.
type BackoffKind int32

const (
	// BackoffKind_UNKNOWN defaults to BackoffKind_EXPONENTIAL
	BackoffKind_BackoffKind_UNKNOWN BackoffKind = 0
	// BackoffKind_EXPONENTIAL is an exponential backoff.
	BackoffKind_BackoffKind_EXPONENTIAL BackoffKind = 1
	// BackoffKind_CONSTANT is a constant backoff.
	BackoffKind_BackoffKind_CONSTANT BackoffKind = 2
)

// Enum value maps for BackoffKind.
var (
	BackoffKind_name = map[int32]string{
		0: "BackoffKind_UNKNOWN",
		1: "BackoffKind_EXPONENTIAL",
		2: "BackoffKind_CONSTANT",
	}
	BackoffKind_value = map[string]int32{
		"BackoffKind_UNKNOWN":     0,
		"BackoffKind_EXPONENTIAL": 1,
		"BackoffKind_CONSTANT":    2,
	}
)

func (x BackoffKind) Enum() *BackoffKind {
	p := new(BackoffKind)
	*p = x
	return p
}

func (x BackoffKind) String() string {
	name, valid := BackoffKind_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// Backoff configures a backoff.
type Backoff struct {
	unknownFields []byte
	// BackoffKind is the kind of backoff.
	BackoffKind BackoffKind `protobuf:"varint,1,opt,name=backoff_kind,json=backoffKind,proto3" json:"backoff_kind,omitempty"`
	// Exponential is the arguments for an exponential backoff.
	Exponential *Exponential `protobuf:"bytes,2,opt,name=exponential,proto3" json:"exponential,omitempty"`
	// Constant is the arugment for a constant backoff.
	Constant *Constant `protobuf:"bytes,3,opt,name=constant,proto3" json:"constant,omitempty"`
}

func (x *Backoff) Reset() {
	*x = Backoff{}
}

func (*Backoff) ProtoMessage() {}

func (x *Backoff) GetBackoffKind() BackoffKind {
	if x != nil {
		return x.BackoffKind
	}
	return BackoffKind_BackoffKind_UNKNOWN
}

func (x *Backoff) GetExponential() *Exponential {
	if x != nil {
		return x.Exponential
	}
	return nil
}

func (x *Backoff) GetConstant() *Constant {
	if x != nil {
		return x.Constant
	}
	return nil
}

// Exponential is the exponential arguments.
type Exponential struct {
	unknownFields []byte
	// InitialInterval is the initial interval in milliseconds.
	// Default: 800ms.
	InitialInterval uint32 `protobuf:"varint,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	// Multiplier is the timing multiplier.
	// Default: 1.8
	Multiplier float32 `protobuf:"fixed32,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// MaxInterval is the maximum timing interval in milliseconds.
	// Default: 20 seconds
	MaxInterval uint32 `protobuf:"varint,3,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	// RandomizationFactor is the randomization factor.
	// Should be from [0, 1] as a percentage of the retry interval.
	//
	// randomized interval = RetryInterval * (random value in range [1 - RandomizationFactor, 1 + RandomizationFactor])
	//
	// Default: 0 (disabled)
	RandomizationFactor float32 `protobuf:"fixed32,4,opt,name=randomization_factor,json=randomizationFactor,proto3" json:"randomization_factor,omitempty"`
	// MaxElapsedTime if set specifies a maximum time for the backoff, in milliseconds.
	// After this time the backoff and attached process terminates.
	// May be empty, might be ignored.
	MaxElapsedTime uint32 `protobuf:"varint,5,opt,name=max_elapsed_time,json=maxElapsedTime,proto3" json:"max_elapsed_time,omitempty"`
}

func (x *Exponential) Reset() {
	*x = Exponential{}
}

func (*Exponential) ProtoMessage() {}

func (x *Exponential) GetInitialInterval() uint32 {
	if x != nil {
		return x.InitialInterval
	}
	return 0
}

func (x *Exponential) GetMultiplier() float32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Exponential) GetMaxInterval() uint32 {
	if x != nil {
		return x.MaxInterval
	}
	return 0
}

func (x *Exponential) GetRandomizationFactor() float32 {
	if x != nil {
		return x.RandomizationFactor
	}
	return 0
}

func (x *Exponential) GetMaxElapsedTime() uint32 {
	if x != nil {
		return x.MaxElapsedTime
	}
	return 0
}

// Constant contains constant backoff options.
type Constant struct {
	unknownFields []byte
	// Interval is the timing to back off, in milliseconds.
	// Defaults to 5 seconds.
	Interval uint32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Constant) Reset() {
	*x = Constant{}
}

func (*Constant) ProtoMessage() {}

func (x *Constant) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}
